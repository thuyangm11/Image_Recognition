# -*- coding: utf-8 -*-
"""
Created on Wed Sep 21 09:51:53 2016

@author: Guest
"""

import sys
import os
import _io
from collections import namedtuple
from PIL import Image

class Nude(object):
    
    Skin=namedtuple('Skin','id skin region x y')
    
    #打开图片
    def __init__(self,path_or_image):
        # 如果path_or_image输入属性为Image.Image的实例，则直接赋值
        if isinstance(path_or_image,Image.Image):
            self.image=path_or_image
        # 如何path_or_iamge输入熟悉为str的实例（即图片链接），则打开图片
        elif isinstance(path_or_image,str):
            self.image=Image.open(path_or_image)
            
        #获取图片所有颜色通道
        bands=self.image.getbands()
        #判断是否为单通道图片即为灰度图，是则将灰度图转化为RGB图
        if len(bands)==1:
            #新建一个等同大小的RGB图
            new_img=Image.new('RGB',self.image.size)
            #拷贝灰度图到rgb图  PIL模块会自动完成颜色通道转换
            new_img.paste(self.image)
            f=self.image.filename
            #替换self.image
            self.image=new_img
            self.image.filename=f
        
        #获取图片的所有像素的skin对象
        self.Skin_map=[]
        #检测到的皮肤区域对象。元素的索引即为皮肤区域号，元素都是包含Skin对象的列表
        self.detected_regions=[]
        #元素为包含一些int的列表，区域号代表一些待合并的区域
        self.merge_regions=[]
        #整合后的皮肤区域，元素的索引即为皮肤区域号，元素为包含Skin对象的列表
        self.skin_regions=[]
        #最近合并的两个皮肤区域的区域号，初始化为-1
        self.last_from,self.last_to=-1,-1
        #色情图片判断结果
        self.result=None
        #处理得到的信息
        self.message=None
        #图像宽，高
        self.width,self.height=self.image.size
        #图像总像素
        self.total_pixels=self.width*self.height
    
    #对于输入尺寸较大的图片，为了提高图片识别的效率，需要对大尺寸图片进行缩小
    def resize(self,maxwidth=1000,maxheight=1000):
        '''
        基于给定的最大宽高按比例重设图片大小
        这样的操作并不严谨，图片缩小后像素点发生变化可能会影响到算法的判定过程
        
        如果无变化则返回0
        原图片宽度大于maxwidth返回1
        原图片高度大于maxheight返回2
        原图片宽高大于maxwidth，maxheight返回3
        '''
        #储存返回值,初始化为0
        ret=0
        if maxwidth:
            if self.width>maxwidth:
                #图片缩小的比例
                wpercent=(maxwidth/self.width)
                hsize=int((self.height*wpercent))
                fname=self.image.filename
                #Image.LANCZOS是重采样滤波器，用于抗锯齿
                self.image=self.image.resize((maxwidth,hsize),Image.LANCZOS)
                self.image.filename=fname
                self.width,self.height=self.image.size
                self.total_pixels=self.height*self.width
                ret+=1
        if maxheight:
            if self.height>maxheight:
                #图片缩小的比例
                hpercent=(maxheight/self.height)
                wsize=int((float(self.width)*float(hpercent)))
                fname=self.image.filename
                #Image.LANCZOS是重采样滤波器，用于抗锯齿
                self.image=self.image.resize((wsize,maxheight),Image.LANCZOS)
                self.image.filename=fname
                self.width,self.height=self.image.size
                self.total_pixels=self.height*self.width
                ret+=2
        return ret
    
    def parse(self):
        #如果已经有结果，返回本对象
        if self.result is not None:
            return self
        #获取图片所有像素数据
        pixels=self.image.load()
        for y in range(self.height):
            for x in range(self.width):
                #得到像素的三个RGB通道的值
                r=pixels[x,y][0]    #red
                g=pixels[x,y][1]    #green
                b=pixels[x,y][2]    #blue
                #判定当前像素是否为肤色像素
                isSkin=True if self._classify_skin(r,g,b) else False
                #给每一个像素分配唯一的ID（1,2，...，height*width）
                #x,y的值从0开始
                _id=x+y*self.width+1
                #位每个像素创建唯一的Skin对象，并添加到self.Skin_map中
                self.Skin_map.append(self.Skin(_id,isSkin,None,x,y))
                
                #若当前像素不是皮肤对象，则直接跳过
                if not isSkin:
                    continue
        
        #遍历当前已经处理的过的像素点的相邻像素。示意图为：
        #***
        #*^
        #_id从1开始,则对应的索引值从0开始
        check_indexes=[_id-2,#当前像素点的左方像素
                        _id-self.width-2,#当前像素点左上方的像素
                        _id-self.width-1,#当前像素点正上方的像素
                        _id-self.width]#当前像素点右上方的像素
        
        #用来记录相邻像素中肤色像素所处的区域号，初始化为-1
        region=-1
        for index in check_indexes:
            #尝试遍历索引相邻像素的Skin对象，没有则跳出循环
            try:
                self.Skin_map[index]
            except IndexError:
                break
            #相邻像素为肤色像素
            if self.Skin_map[index].skin:
                #如果相邻像素与当前像素的region为有效值且不相同且尚未添加合并任务
                if (self.Skin_map[index].region!=None and
                        region!=None and region!=-1 and
                        self.Skin_map[index].region!=region and
                        self.last_from!=region and
                        self.last_to!=self.Skin_map[index].region):
                    self._add_merge(region,self.Skin_map[index].region)
                #记录此相邻像素所在的区域号
                region=self.Skin_map[index].region
            #如果遍历完所有的相邻像素后region仍为-1，说明所有相邻像素都不是肤色像素
            if region==-1:
                #更新属性为新的区域号，
                _skin=self.Skin_map[_id-1]._replace(region=len(self.detected_regions))
                self.Skin_map[_id-1]=_skin
                #将此肤色像素所在的区域设置为新区域
                self.detected_regions.append([self.Skin_map[_id-1]])
            #region不等于-1 且不等于None时说明有区域号为有效值的相邻肤色像素
            elif region!=None:
                _skin=self.Skin_map[_id-1]._replace(region=region)
                self.Skin_map[_id-1]=_skin
                #向此区域的像素列表中添加该肤色像素
                self.detected_regions[region].append([self.Skin_map[_id-1]])
        #完成所有区域合并任务后合并整理好的区域存储到self.skin_regions
        self._merge(self.detected_regions,self.merge_regions)
        self._analyse_regions()
        return self
    
    def _add_merge(self,_from,_to):
        #两个区域号赋值给类属性
        self.last_from=_from
        self.last_to=_to
        
        #记录self.merge_regions的某个索引值，初始化为-1
        from_index=-1
        #记录self.merge_regions的某个索引值，初始化为-1
        to_index=-1
        
        #遍历每个self.merge_regions的元素
        for index,region in enumerate(self.merge_regions):
            for r_index in region:
                if r_index==_from:
                    from_index=index
                if r_index==_to:
                    to_index=index
        
        #若两个区域号都存在于self.merge_regions
        if from_index!=-1 and to_index!=-1:
            #如果两个区域号分别存在于两个列表中：
            #那么合并列表
            if from_index!=to_index:
                self.merge_regions[from_index].extend(self.merge_regions[to_index])
                del self.merge_regions[to_index]
            return
        
        #若两个区域号都不存在与self.merge_regions中
        if from_index==-1 and to_index==-1:
            self.merge_regions.append([_from,_to])
            return
        
        #若两个区域号中有一个存在于self.merge_regions
        if from_index!=-1 and to_index==-1:
            self.merge_regions[from_index].append(_to)
            return 
        if from_index==-1 and to_index!=-1:
            self.merge_regions[to_index].append(_from)
            return 
        
    def _merge(self,detected_regions,merge_regions):
        #新建列表new_detected_regions
        #元素为一些代表Skin对象的列表
        #new_detected-regions的元素代表的是皮肤区域、
        new_detected_regions=[]
        
        for index ,region in enumerate(merge_regions):
           try:
               new_detected_regions[index]
           except IndexError:
               new_detected_regions([])
           for r_index in region:
               new_detected_regions[index].extend(detected_regions[r_index])
               detected_regions[r_index]=[]
        
        #将剩下的皮肤区域添加到new_detected_regions
        for region in detected_regions:
            if len(region)>0:
                new_detected_regions.append(region)
        
        self._clear_regions(new_detected_regions)
    
    def _clear_regions(self,detected_regions):
        for region in detected_regions:
            if len(region)>30:
                self.skin_regions.append(region)
    
    def _analyse_regions(self):
        if len(self.skin_regions)<3:
            self.message='Less than 3 skin regions({_skin_region_size})'.format(_skin_region_size=len(self.skin_regions))
            self.result=False
            return self.result
            
        #为皮肤区域排序
        self.skin_regions=sorted(self.skin_regions,key=lambda s:len(s),reversed=True)
        
        #计算皮肤总像素数
        total_skin=float(sum([len(skin_region) for skin_region in self.skin_regions]))
        
        #如何皮肤区域与整个图像的比值小于15%，则不是色情图片
        if total_skin/self.total_pixels*100<15:
            self.message='Total skin percentage lower than 15({:.2f})'.format(total_skin/self.total_pixels*100)
            self.result=False
            return self.result
        
        #如果最大皮肤区域小于总皮肤区域的45%则不是色情图片
        if len(self.skin_regions[0])/total_skin*100<45:
            self.message='The maxinum region contains less than 45({:.2f})'.format(len(self.skin_regions[0])/total_skin*100)
            self.result=False
            return self.result
        
        if len(self.skin_regions)>60:
            self.message='More than 60 skin regions ({})'.format(len(self.skin_regions))
            self.result=False
            return self.result
                
        self.message='Nude!!'
        self.result=True
        return self.result
        
    def _classify_skin(self,r,g,b):
        #根据R,G,B值来进行判断
        rgb_classifier=r>95 and \
        g>40 and g<100 and \
        b>20 and \
        max([r,g,b])-min([r,g,b])>15 and \
        abs(r-g)>15 and \
        r>g and r>b
        
        #根据处理后的rgb值进行判断
        nr,ng,nb=self._to_normalized(r,g,b)
        norm_rgb_classifier=nr/ng>1.185 and \
        float(r*b)/((r+g+b)**2)>0.107 and \
        float(r*g)/((r+g+b)**2)>0.112
        
        #HSV颜色模式下的判定
        h,s,v=self._to_hsv(r,g,b)
        hsv_classifier=h>0 and \
        h<35 and s>0.23 and  s<0.68
        
        #YCbCr颜色模式下的判定
        y,cb,cr=self._to_ycrbr(r,g,b)
        ycbcr_classifier= 97.5<=cb<=142.5 and 134 <=cr<=176
        
        return ycbcr_classifier
    
    def _to_normalized(self,r,g,b):
        if r==0:
            r=0.001
        if g==0:
            g=0.001
        if b==0:
            b=0.001
        _sum=float(r+g+b)
        return[r/_sum,g/_sum,b/_sum]
    
    def _to_ycrbr(self,r,g,b):
        y = .299*r + .587*g + .114*b
        cb = 128 - 0.168736*r - 0.331364*g + 0.5*b
        cr = 128 + 0.5*r - 0.418688*g - 0.081312*b
        return y, cb, cr
    
    def _to_hsv(self, r, g, b):
        h = 0
        _sum = float(r + g + b)
        _max = float(max([r, g, b]))
        _min = float(min([r, g, b]))
        diff = float(_max - _min)
        if _sum == 0:
            _sum = 0.0001
        if _max == r:
            if diff == 0:
                h = sys.maxsize
            else:
                h = (g - b) / diff
        elif _max == g:
            h = 2 + ((g - r) / diff)
        else:
            h = 4 + ((r - g) / diff)
        h *= 60
        if h < 0:
            h += 360
        return [h, 1.0 - (3.0 * (_min / _sum)), (1.0 / 3.0) * _max]
        
    def inspect(self):
        _image='{} {} {}x{}'.format(self.image.filename,self.image.format,self.width,self.height)
        return '{_image}: result={_result} message={_message}'.format(_image=_image,_result=self.result,_message=self.message)
    
    def showSkinRegions(self):
        if self.result==None:
            return 
        #皮肤像素的ID集合
        skinIdSet=set()
        #原图做一份拷贝
        simage=self.image
        #加载数据
        simageData=simage.load()
        
        #将皮肤像素的ID存入到skinIdSet
        for sr in self.skin_regions:
            for pixel in sr:
                skinIdSet.add(pixel.id)
        
        #将皮肤像素设为白色，其余设为黑色
        for pixel in self.Skin_map:
            if pixel.id not in skinIdSet:
                simageData[pixel.x,pixel.y]=0,0,0
            else:
                simageData[pixel.x,pixel.y]=255,255,255
        
        #源文件绝对路径
        filePath=os.path.abspath(self.image.filename)
        #源文件所在目录
        fileDirectory=os.path.dirname(filePath)+'/'
        #源文件的完整文件名
        fileFullname=os.path.basename(filePath)
        #分离源文件的完整文件名得到文件名和扩展名
        fileName,fileExtName=os.path.splitext(fileFullname)
        #保存图片
        simage.save('{}{}_{}{}'.format(fileDirectory,fileName,'Nude'if self.result else 'Normal',fileExtName))
        
        
if __name__=='__main__':
    import argparse
    
    parser=argparse.ArgumentParser(description='Detect nudity in images.')
    parser.add_argument('files',metavar='image',nargs='+',help='Images you wish to test')
    parser.add_argument('-r', '--resize', action='store_true',help='Reduce image size to increase speed of scanning')
    parser.add_argument('-v', '--visualization', action='store_true',
                        help='Generating areas of skin image')

    args = parser.parse_args()
    
    for fname in args.files:
        if os.path.isfile(fname):
            n=Nude(fname)
            if args.resize:
                n.resize(maxheight=800,maxwidth=600)
            n.parse()
            if args.visualization:
                n.showSkinRegions()
            print(n.result,n.inspect())
        else:
            print (fname,'is not a file')

        
        
    
    
